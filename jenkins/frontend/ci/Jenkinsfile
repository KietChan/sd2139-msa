pipeline {
    agent any
    tools {
        nodejs "node_20" // Need to config jenkins first.
    }
    parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Barnch to checkout from')
        choice(name: 'MODE', choices: ['Full', 'Code Check Only', 'Package Only'], description: 'Execution Flow')
    }
    stages {
        stage('Pull the whole branch instead of commit') {
            steps {
//                 withCredentials([sshUserPrivateKey(credentialsId: 'KietChan-PrivateKey', keyFileVariable: 'SSH_KEY')]) {
//                     sh """
//                         git checkout ${params.BRANCH}
//                         GIT_SSH_COMMAND="ssh -i $SSH_KEY" git pull -r
//                     """
//                 }

                sshagent(['KietChan-PrivateKey']) {
                    sh """
                        git checkout ${params.BRANCH}
                        git pull -r
                    """
                }
            }
        }

        stage('Test Frontend') {
            when {
                expression { params.MODE == 'Code Check Only' || params.MODE == 'Full' }
            }
            steps {
                dir('src/frontend') {
                    sh 'npm install'
                    sh 'npm test'
                    sh 'rm -rf node_modules'
                }
            }
        }
        stage('Read Version from Source Code') {
            when {
                expression { params.MODE == 'Package Only' || params.MODE == 'Full' }
            }
            steps {
                script {
                    def packageJson = readJSON file: 'src/frontend/package.json'
                    def versionParts = packageJson.version.tokenize('.')
                    versionParts[2] = (versionParts[2].toInteger() + 1).toString()
                    env.VERSION = versionParts.join('.')
                    packageJson.version = env.VERSION
                    writeJSON file: 'src/frontend/package.json', json: packageJson, pretty: 4
                    echo "New version: ${env.VERSION}"
                }
            }
        }
         stage('Build Docker Image') {
            when {
                expression { params.MODE == 'Package Only' || params.MODE == 'Full' }
            }
            steps {
                script {
                    sh """
                        docker build -t sd2139_ecr_repo_frontend:${env.VERSION} ./src/frontend
                    """
                }
            }
        }
        stage('Tag and Push Docker Image to AWS ECR') {
            when {
                expression { params.MODE == 'Package Only' || params.MODE == 'Full' }
            }
            steps {
                script {
                    sh 'aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 992382727045.dkr.ecr.ap-southeast-1.amazonaws.com'
                    sh "docker tag sd2139_ecr_repo_frontend:${env.VERSION} 992382727045.dkr.ecr.ap-southeast-1.amazonaws.com/sd2139_ecr_repo_frontend:${env.VERSION}"
                    sh "docker push 992382727045.dkr.ecr.ap-southeast-1.amazonaws.com/sd2139_ecr_repo_frontend:${env.VERSION}"
                }
            }
        }
        stage('Commit Version Update') {
            when {
                expression { params.MODE == 'Package Only' || params.MODE == 'Full' }
            }
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'KietChan-PrivateKey', keyFileVariable: 'SSH_KEY')]) {
                    sh """
                        git config --global user.email "jenkins_kiet@example.com"
                        git config --global user.name "Jenkins Bot"
                        git add .
                        git commit -m "Increment the Front End's version to ${env.VERSION}"
                        GIT_SSH_COMMAND="ssh -i $SSH_KEY" git push
                    """
                    }
                }
            }
        }
        // TODO: Job to deploy to the Stage server if we have any.
    }
}
